import sys
print(sys.path)
import sys
sys.path.append('python\python310\lib\site-packages')


# Dependencies and Setup
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import requests
import time
from scipy.stats import linregress
# Import the OpenWeatherMap API key
from api_keys import weather_api_key

# Import citipy to determine the cities based on latitude and longitude
from citipy import citipy

# Empty list for holding the latitude and longitude combinations
lat_lngs = []

# Empty list for holding the cities names
cities = []

# Range of latitudes and longitudes
lat_range = (-90, 90)
lng_range = (-180, 180)

# Create a set of random lat and lng combinations
lats = np.random.uniform(lat_range[0], lat_range[1], size=1500)
lngs = np.random.uniform(lng_range[0], lng_range[1], size=1500)
lat_lngs = zip(lats, lngs)

# Identify nearest city for each lat, lng combination
for lat_lng in lat_lngs:
    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name
    # If the city is unique, then add it to a our cities list
    if city not in cities:
        cities.append(city)
		
# Print the city count to confirm sufficient count
print(f"Number of cities in the list: {len(cities)}")

# Set the API base URL
url = "http://api.openweathermap.org/data/2.5/weather?" # YOUR CODE HERE
# Define an empty list to fetch the weather data for each city
city_data = []
# Print to logger
print("Beginning Data Retrieval     ")
print("-----------------------------")
# Create counters
record_count = 1
set_count = 1
# Loop through all the cities in our list to fetch weather data
for i, city in enumerate(cities):
    # Group cities in sets of 50 for logging purposes
    if (i % 50 == 0 and i >= 50):
        set_count += 1
        record_count = 0
    # Create endpoint URL with each city
    city_url = url + "appid=" + weather_api_key + "&q=" + city # Corrected
    # Log the url, record, and set numbers
    print("Processing Record %s of Set %s | %s" % (record_count, set_count, city))
	
    # Add 1 to the record count
    record_count += 1
     # Run an API request for each of the cities
    try:
        # Parse the JSON and retrieve data
        city_weather = requests.get(city_url).json()
        # Parse out latitude, longitude, max temp, humidity, cloudiness, wind speed, country, and date
        city_lat = city_weather["coord"]["lat"]
        city_lng = city_weather["coord"]["lon"]
        city_max_temp = city_weather["main"]["temp_max"]
        city_humidity = city_weather["main"]["humidity"]
        city_clouds = city_weather["clouds"]["all"]
        city_wind = city_weather ["wind"]["speed"]
        city_country = city_weather["sys"]["country"]
        city_date = city_weather["dt"]
        # Append the City information into city_data list
        city_data.append({"City": city,
                          "Lat": city_lat,
                          "Lng": city_lng,
                          "Max Temp": city_max_temp,
                          "Humidity": city_humidity,
                          "Cloudiness": city_clouds,
                          "Wind Speed": city_wind,
                          "Country": city_country,
                          "Date": city_date})
    # If an error is experienced, skip the city
    except:
        print("City not found. Skipping...")
        pass
    # Indicate that Data Loading is complete
print("-----------------------------")
print("Data Retrieval Complete      ")
print("-----------------------------")
# Convert the cities weather data into a Pandas DataFrame
city_data_df = pd.DataFrame(city_data)
# Show Record Count
print(city_data_df.count())

# Display sample data
city_data_df.head()

city_data_df.to_csv(r"C:\Users\astri\class_work\WeatherPy\cities.csv", index_label="City_ID")

# Read saved data
city_data_df = pd.read_csv("C:\\Users\\astri\\class_work\\WeatherPy\\cities.csv", index_col="City_ID")

# Display sample data
city_data_df.head()

# Build scatter plot for latitude vs. temperature
plt.figure(figsize=(8,6)) 

plt.scatter(city_data_df['Lat'], city_data_df['Max Temp'], color='green', alpha=0.75)

plt.title('City Max Latitude vs. Temperature (2022-10-18)')
plt.xlabel('Latitude')
plt.ylabel('Max Temp (C)')

plt.grid(True, alpha=0.5)


# Incorporate the other graph properties
# YOUR CODE HERE

# Save the figure
save_path = r"C:\Users\astri\class_work\WeatherPy\Fig1.png"
plt.savefig(save_path)

# Show plot
plt.show()

# Build the scatter plots for latitude vs. humidity
# YOUR CODE HERE
plt.figure(figsize=(8,6)) 

plt.scatter(city_data_df['Lat'], city_data_df['Humidity'], color='green', alpha=0.75)

plt.title('City Max Latitude vs. Humidity')
plt.xlabel('Latitude')
plt.ylabel('Humidity')

plt.grid(True, alpha=0.5)
# Incorporate the other graph properties
# YOUR CODE HERE

# Save the figure
save_path = r"C:\Users\astri\class_work\WeatherPy\Fig2.png"
plt.savefig(save_path)

# Show plot
plt.show()

# Build the scatter plots for latitude vs. cloudiness
# YOUR CODE HERE
plt.figure(figsize=(8,6)) 

plt.scatter(city_data_df['Lat'], city_data_df['Cloudiness'], color='green', alpha=0.75)

plt.title('City Max Latitude vs. Cloudiness')
plt.xlabel('Latitude')
plt.ylabel('Cloudiness (%)')

plt.grid(True, alpha=0.5)
# Incorporate the other graph properties
# YOUR CODE HERE

# Save the figure
save_path = r"C:\Users\astri\class_work\WeatherPy\Fig3.png"
plt.savefig(save_path)

# Show plot
plt.show()


# Define a function to create Linear Regression plots
# YOUR CODE HERE


def plot_linear_regression(df, x_column, y_column):
    """
    
    """
    # Extract x and y data from the DataFrame
    x_data = df[x_column]
    y_data = df[y_column]

    
    slope, intercept, r_value, p_value, std_err = linregress(x_data, y_data)

    
    plt.figure(figsize=(8, 6))
    plt.scatter(x_data, y_data, color='skyblue', edgecolor='black', alpha=0.75)

    
    plt.plot(x_data, slope * x_data + intercept, color='red', label='Linear Regression')

    # title and labels
    plt.title(f'{y_column} vs. {x_column} with Linear Regression', fontsize=14)
    plt.xlabel(x_column, fontsize=12)
    plt.ylabel(y_column, fontsize=12)

    #  legend
    plt.legend()

    # Show plot
    plt.show()

    # Print 
    print(f"Linear Regression: slope={slope:.2f}, intercept={intercept:.2f}, r-value={r_value:.2f}, p-value={p_value:.2f}, std_err={std_err:.2f}")
	
	# Create a DataFrame with the Northern Hemisphere data (Latitude >= 0)
# YOUR CODE HERE



# Filter the DataFrame for Northern Hemisphere (Latitude >= 0)
northern_hemi_df = city_data_df[city_data_df['Lat'] >= 0]



# Display sample data
northern_hemi_df.head()

# Create a DataFrame with the Southern Hemisphere data (Latitude < 0)
# YOUR CODE HERE
southern_hemi_df = city_data_df[city_data_df['Lat'] <= 0] 
# Display sample data
southern_hemi_df.head()

plot_linear_regression(northern_hemi_df, 'Lat', 'Max Temp')

# Linear regression on Southern Hemisphere
# YOUR CODE HERE

plot_linear_regression(southern_hemi_df, 'Lat', 'Max Temp')

# Northern Hemisphere
# YOUR CODE HERE

#HUmidity vs. Latitude linear regression 

plot_linear_regression(northern_hemisphere_df, 'Lat', 'Humidity')

# Southern Hemisphere
# YOUR CODE HERE

plot_linear_regression(southern_hemi_df, 'Lat', 'Humidity')

# Northern Hemisphere
# YOUR CODE HERE
#cloudiness vs. latitude 
plot_linear_regression(northern_hemisphere_df, 'Lat', 'Cloudiness')

#southern hemisphere 

#cloudiness vs. latitude 

plot_linear_regression(southern_hemi_df, 'Lat', 'Cloudiness')

#wind speed vs. latitude 

# Northern Hemisphere
# YOUR CODE HERE
plot_linear_regression(northern_hemisphere_df, 'Lat', 'Wind Speed')

#wind speed vs. latitude
#southern hemisphere 
plot_linear_regression(southern_hemi_df, 'Lat', 'Wind Speed')












